package net.atomique.ksar;

import java.awt.Dimension;

/*
 * kSarDesktop.java
 *
 * Created on 26 f√©vrier 2008, 20:22
 */
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;
import java.util.Iterator;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.LookAndFeel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.UIManager.LookAndFeelInfo;

/**
 *
 * @author  alex
 */
public class kSarDesktop extends javax.swing.JFrame {

    public static final long serialVersionUID = 501L;

    /** Creates new form kSarDesktop */
    public kSarDesktop() {
        currentVersion = VersionNumber.getInstance();
        kSarConfig.hasUI=true;
        int wmargins = 90;
        int hmargins = 60;
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        initComponents();
        load_shortcut();
        setBounds(wmargins, hmargins, screenSize.width - wmargins * 2, screenSize.height - hmargins * 2);
        desktopPane.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        automenu = new javax.swing.JMenu();
        autoempty = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();
        triggermenu = new javax.swing.JMenu();
        jmenusolaristrigger = new javax.swing.JMenuItem();
        jmenulinuxtrigger = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        windowmenu = new javax.swing.JMenu();
        tileitem = new javax.swing.JMenuItem();
        optmenu = new javax.swing.JMenu();
        colormenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        refreshopt = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        alloptions = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        autowinconfig = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        checkforupdate = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("kSar : a sar grapher");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        desktopPane.setPreferredSize(null);
        getContentPane().add(desktopPane, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        openMenuItem.setText("New window");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        automenu.setText("Auto window");

        autoempty.setText("Empty window");
        autoempty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoemptyActionPerformed(evt);
            }
        });
        automenu.add(autoempty);

        fileMenu.add(automenu);
        fileMenu.add(jSeparator2);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        triggermenu.setText("Triggers");

        jmenusolaristrigger.setText("Solaris");
        jmenusolaristrigger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmenusolaristriggerActionPerformed(evt);
            }
        });
        triggermenu.add(jmenusolaristrigger);

        jmenulinuxtrigger.setText("Linux");
        jmenulinuxtrigger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmenulinuxtriggerActionPerformed(evt);
            }
        });
        triggermenu.add(jmenulinuxtrigger);

        jMenuItem3.setText("AIX");
        triggermenu.add(jMenuItem3);

        jMenuItem4.setText("HP-UX");
        triggermenu.add(jMenuItem4);

        menuBar.add(triggermenu);

        windowmenu.setText("Window");

        tileitem.setText("Tile");
        tileitem.setAutoscrolls(true);
        tileitem.setDoubleBuffered(true);
        tileitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tileitemActionPerformed(evt);
            }
        });
        windowmenu.add(tileitem);

        menuBar.add(windowmenu);

        optmenu.setText("Options");

        colormenu.setText("Setup lines colors");
        colormenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colormenuActionPerformed(evt);
            }
        });
        optmenu.add(colormenu);
        optmenu.add(jSeparator1);

        refreshopt.setText("Refresh options");
        refreshopt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshoptActionPerformed(evt);
            }
        });
        optmenu.add(refreshopt);
        optmenu.add(jSeparator3);

        alloptions.setText("Preferences");
        alloptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alloptionsActionPerformed(evt);
            }
        });
        optmenu.add(alloptions);
        optmenu.add(jSeparator4);

        autowinconfig.setText("Config window");
        autowinconfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autowinconfigActionPerformed(evt);
            }
        });
        optmenu.add(autowinconfig);

        menuBar.add(optmenu);

        helpMenu.setText("Help");

        checkforupdate.setText("Check for update");
        checkforupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkforupdateActionPerformed(evt);
            }
        });
        helpMenu.add(checkforupdate);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        //menuBar.add(javax.swing.Box.createHorizontalGlue());

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        tryToQuit();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        AboutBox myAboutBox = AboutBox.getInstance();
        myAboutBox.setVisible(true);
        Dimension d1 = myAboutBox.getSize();
        Dimension d2 = getSize();
        desktopPane.remove(myAboutBox);
        desktopPane.add(myAboutBox);
        int x = Math.max((d2.width - d1.width) / 2, 0);
        int y = Math.max((d2.height - d1.height) / 2, 0);
        myAboutBox.setBounds(x, y, d1.width, d1.height);
        try {
            myAboutBox.setSelected(true);
        } catch (PropertyVetoException vetoe) {
        }
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        tryToQuit();
    }//GEN-LAST:event_formWindowClosing

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        make_new_window("Empty");
    }//GEN-LAST:event_openMenuItemActionPerformed

    public kSar make_new_window(String title) {
        kSar newsar = new kSar(this, title);
        return newsar;
    }

    public void do_tile() {
        tile(desktopPane);
    }

    private void tileitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tileitemActionPerformed
        do_tile();
}//GEN-LAST:event_tileitemActionPerformed

    private void checkforupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkforupdateActionPerformed
        UpdateManager myUpdateManager = new UpdateManager();
        myUpdateManager.setVisible(true);
        Dimension d1 = myUpdateManager.getSize();
        Dimension d2 = getSize();
        desktopPane.add(myUpdateManager);
        int x = Math.max((d2.width - d1.width) / 2, 0);
        int y = Math.max((d2.height - d1.height) / 2, 0);
        myUpdateManager.setBounds(x, y, d1.width, d1.height);
        try {
            myUpdateManager.setSelected(true);
        } catch (java.beans.PropertyVetoException vetoe) {
        }
    }//GEN-LAST:event_checkforupdateActionPerformed

    private void alloptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alloptionsActionPerformed
        IConfigurationViewModel configurationViewModel = kSarConfig.getInstance();
        ConfigurationDialog configDialog = new ConfigurationDialog(configurationViewModel);
        configDialog.setModal(true);
        configDialog.setVisible(true);
        
        if (configDialog.getResult() == ConfigurationDialog.OK_RESULT) {
            kSarConfig.writeDefault();
            
            try {
                for (LookAndFeelInfo lookAndFeel : UIManager.getInstalledLookAndFeels()) {
                    if (lookAndFeel.getName().equals(configurationViewModel.getLookAndFeel())) {
                        UIManager.setLookAndFeel(lookAndFeel.getClassName());
                        break;
                    }
                }

                SwingUtilities.updateComponentTreeUI(this);
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
        }
}//GEN-LAST:event_alloptionsActionPerformed

    private void jmenusolaristriggerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenusolaristriggerActionPerformed
        SolarisTrigger tmptrigger = new SolarisTrigger();
        tmptrigger.setVisible(true);
        desktopPane.add(tmptrigger);
        try {
            tmptrigger.setSelected(true);
        } catch (java.beans.PropertyVetoException vetoe) {
        }
}//GEN-LAST:event_jmenusolaristriggerActionPerformed

    private void jmenulinuxtriggerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmenulinuxtriggerActionPerformed
        LinuxTrigger tmptrigger = new LinuxTrigger();
        tmptrigger.setVisible(true);
        desktopPane.add(tmptrigger);
        try {
            tmptrigger.setSelected(true);
        } catch (java.beans.PropertyVetoException vetoe) {
        }
}//GEN-LAST:event_jmenulinuxtriggerActionPerformed

    private void autoemptyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoemptyActionPerformed
        make_new_window("Empty");
    }//GEN-LAST:event_autoemptyActionPerformed

    private void autowinconfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autowinconfigActionPerformed
        ConfigStartup tmpstart = new ConfigStartup(this);
        tmpstart.setVisible(true);
    }//GEN-LAST:event_autowinconfigActionPerformed

    private void colormenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colormenuActionPerformed
        LineColorChooser tmp = new LineColorChooser(this, true);
        tmp.setVisible(true);
    }//GEN-LAST:event_colormenuActionPerformed

    private void refreshoptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshoptActionPerformed
        ParserOptions tmp = new ParserOptions(this,true);
        tmp.setVisible(true);
    }//GEN-LAST:event_refreshoptActionPerformed

    public void load_shortcut() {
        if (kSarConfig.shortcut_window_list == null) {
            return;
        }
        for (Iterator<String> it = kSarConfig.shortcut_window_list.keySet().iterator(); it.hasNext();) {
            String key = it.next();
            String value = kSarConfig.shortcut_window_list.get(key);
            add_shortcut((String) value);
        }
    }

    public void show_shortcut(String shortcut_desc) {
        String tmpcmd = null;
        for (Iterator<String> it = kSarConfig.shortcut_window_list.keySet().iterator(); it.hasNext();) {
            String key = it.next();
            String value = kSarConfig.shortcut_window_list.get(key);
            if (value.equals(shortcut_desc)) {
                tmpcmd = key;
            }
        }

        if (tmpcmd != null) {
            make_new_window((String) tmpcmd);
        }
    }

    public void add_shortcut(String shortcut_desc) {
        JMenuItem tmp = new JMenuItem(shortcut_desc);
        tmp.setActionCommand(shortcut_desc);
        tmp.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent h) {
                show_shortcut(h.getActionCommand());
            }
        });
        automenu.add(tmp);
    }

    public void delete_shortcut(String shortcut_desc) {
        for (int i = 0; i < automenu.getMenuComponentCount(); i++) {
            JMenuItem tmp = (JMenuItem) automenu.getMenuComponent(i);
            if (tmp != null) {
                if (tmp.getText().equals(shortcut_desc)) {
                    automenu.remove(tmp);
                }
            }
        }
    }

    private static JInternalFrame[] filterFrame(JInternalFrame[] frames) {
        int n = 0;
        for (int i = 0; i < frames.length; i++) {
            if (frames[i].isVisible() && !frames[i].isIcon()) {
                n++;
            }
        }

        JInternalFrame[] newfs = new JInternalFrame[n];
        for (int i = 0,  j = 0; i < frames.length; i++) {
            if (frames[i].isVisible() && !frames[i].isIcon()) {
                newfs[j++] = frames[i];
            }
        }
        return newfs;
    }

    public static void tile(JDesktopPane desktopPane) {
        JInternalFrame[] frames = filterFrame(desktopPane.getAllFrames());
        if (frames.length == 0) {
            return;
        }

        tile(frames, desktopPane.getBounds());
    }

    private static void tile(JInternalFrame[] frames, Rectangle dBounds) {
        int cols = (int) Math.sqrt(frames.length);
        int rows = (int) (Math.ceil(((double) frames.length) / cols));
        int lastRow = frames.length - cols * (rows - 1);
        int width, height;

        if (lastRow == 0) {
            rows--;
            height = dBounds.height / rows;
        } else {
            height = dBounds.height / rows;
            if (lastRow < cols) {
                rows--;
                width = dBounds.width / lastRow;
                for (int i = 0; i < lastRow; i++) {
                    frames[cols * rows + i].setBounds(i * width, rows * height, width, height);
                }
            }
        }

        width = dBounds.width / cols;
        for (int j = 0; j < rows; j++) {
            for (int i = 0; i < cols; i++) {
                frames[i + j * cols].setBounds(i * width, j * height, width, height);
            }
        }
    }

    public void showgraphselected(String s, kSarUI hisUI) {
        JInternalFrame[] frames = desktopPane.getAllFrames();
        if (frames.length <= 0) {
            return;
        }
        for (int i = 0; i < frames.length; i++) {
            if ((frames[i]) instanceof kSarUI) {
                if (hisUI != frames[i] && ! hisUI.mysar.isparsing) {
                    ((kSarUI) frames[i]).changeintoherframe(s);
                }
            }
        }
    }

    private void tryToQuit() {
        int i = JOptionPane.showConfirmDialog(this, "Are you sure you want to exit kSar ?", "Confirm", JOptionPane.YES_NO_OPTION);
        if ( i == JOptionPane.YES_OPTION ) {
            System.exit(0);
        }
    }
    
    
    public String unified_user;
    public String unified_pass;
    public boolean unified_id = false;
    int totalframe = 0;
    public VersionNumber currentVersion;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JMenuItem aboutMenuItem;
    public static javax.swing.JMenuItem alloptions;
    public static javax.swing.JMenuItem autoempty;
    public static javax.swing.JMenu automenu;
    public static javax.swing.JMenuItem autowinconfig;
    public static javax.swing.JMenuItem checkforupdate;
    public static javax.swing.JMenuItem colormenu;
    public javax.swing.JDesktopPane desktopPane;
    public static javax.swing.JMenuItem exitMenuItem;
    public static javax.swing.JMenu fileMenu;
    public static javax.swing.JMenu helpMenu;
    public static javax.swing.JMenuItem jMenuItem3;
    public static javax.swing.JMenuItem jMenuItem4;
    public static javax.swing.JSeparator jSeparator1;
    public static javax.swing.JSeparator jSeparator2;
    public static javax.swing.JSeparator jSeparator3;
    public static javax.swing.JSeparator jSeparator4;
    public static javax.swing.JMenuItem jmenulinuxtrigger;
    public static javax.swing.JMenuItem jmenusolaristrigger;
    public static javax.swing.JMenuBar menuBar;
    public static javax.swing.JMenuItem openMenuItem;
    public static javax.swing.JMenu optmenu;
    public static javax.swing.JMenuItem refreshopt;
    public static javax.swing.JMenuItem tileitem;
    public static javax.swing.JMenu triggermenu;
    public static javax.swing.JMenu windowmenu;
    // End of variables declaration//GEN-END:variables
}
