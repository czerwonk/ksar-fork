/*
 * kSarUI.java
 *
 * Created on 28 f√©vrier 2008, 00:02
 */
package net.atomique.ksar;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.ScrollPaneConstants;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import net.atomique.ksar.Linux.PidCpuSar;
import net.atomique.ksar.Linux.PidIOSar;
import net.atomique.ksar.Linux.PidMemSar;

/**
 *
 * @author  alex
 */
public class kSarUI extends javax.swing.JInternalFrame {

    public static final long serialVersionUID = 501L;
    
    /** Creates new form kSarUI */
    public kSarUI(kSar hissar) {
        mysar = hissar;
        initComponents();
        showtriggermenu.setSelected(mysar.showtrigger);
        jTree1.setToolTipText("");
        
    //
        /*
    {
    public String getToolTipText(MouseEvent evt) {
    if (getRowForLocation(evt.getX(), evt.getY()) == -1)
    return null;
    TreePath curPath = getPathForLocation(evt.getX(), evt.getY());
    return ((ToolTipTreeNode) curPath.getLastPathComponent())
    .getToolTipText();
    }*/

    }

    private String tooltipsfornode(TreePath curPath) {
        String retval = null;
        String tempid =null;
        Object obj = curPath.getLastPathComponent();
        if (obj != null) {
            DefaultMutableTreeNode defaultmutabletreenode = (DefaultMutableTreeNode) obj;
            Object obj1 = defaultmutabletreenode.getUserObject();
            if (obj1 instanceof GraphDescription) {
                GraphDescription graphdescription = (GraphDescription) obj1;
                obj2 = (AllGraph) graphdescription.getobjectPointer();
                if (obj2 instanceof PidCpuSar) {
                    if (mysar.pslist != null) {
                        tempid = ((PidCpuSar) obj2).getMypid();
                    }
                }
                if (obj2 instanceof PidIOSar) {
                    if (mysar.pslist != null) {
                        tempid = ((PidIOSar) obj2).getMypid();
                    }
                }
                if (obj2 instanceof PidMemSar) {
                    if (mysar.pslist != null) {
                        tempid = ((PidMemSar) obj2).getMypid();
                    }
                }
                if (tempid !=null) {
                    retval = (mysar.pslist.listproc.get(tempid)).getCommand();
                }
                if (retval == null) {
                    return "";
                } else {
                    return retval;
                }
            }
        }

        return "";
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTree1 = new JTree(new DefaultTreeModel(mysar.graphtree)) {
            public static final long serialVersionUID = 501L;
            public String getToolTipText(MouseEvent evt) {
                if (getRowForLocation(evt.getX(), evt.getY()) == -1) {
                    return null;
                }
                TreePath curPath = getPathForLocation(evt.getX(), evt.getY());
                return tooltipsfornode(curPath);
            }
        };
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane(jTree1);
        redobutton = new javax.swing.JButton();
        displayPanel = new javax.swing.JPanel();
        chartContainer = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuloadtxt = new javax.swing.JMenuItem();
        menuloadssh = new javax.swing.JMenuItem();
        menuloadcmd = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        exportpdfmenu = new javax.swing.JMenuItem();
        exportjpgmenu = new javax.swing.JMenuItem();
        exportpngmenu = new javax.swing.JMenuItem();
        exportcsvmenu = new javax.swing.JMenuItem();
        exporttxtmenu = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        selecttimemenu = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        addtoauto = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        disknamemenu = new javax.swing.JMenuItem();
        showtriggermenu = new javax.swing.JCheckBoxMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        pagesizemenu = new javax.swing.JMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        chkbox_cpuused = new javax.swing.JCheckBoxMenuItem();
        chkbox_cpu100xaxis = new javax.swing.JCheckBoxMenuItem();
        memusedbufadj = new javax.swing.JCheckBoxMenuItem();
        menushowstackedmem = new javax.swing.JCheckBoxMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        chkbox_stackintr = new javax.swing.JCheckBoxMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();

        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setDoubleBuffered(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(156, 4));
        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        redobutton.setText("Redo");
        redobutton.setEnabled(false);
        redobutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redobuttonActionPerformed(evt);
            }
        });
        jPanel1.add(redobutton, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setLeftComponent(jPanel1);

        displayPanel.setLayout(new java.awt.BorderLayout());

        chartContainer.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        chartContainer.setLayout(new java.awt.BorderLayout());
        displayPanel.add(chartContainer, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(displayPanel);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jMenuBar1.setMinimumSize(new java.awt.Dimension(90, 91));
        jMenuBar1.setName("uimenu"); // NOI18N
        jMenuBar1.setRequestFocusEnabled(false);

        jMenu1.setText("Data");

        menuloadtxt.setText("Load from text file...");
        menuloadtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuloadtxtActionPerformed(evt);
            }
        });
        jMenu1.add(menuloadtxt);

        menuloadssh.setText("Launch SSH command...");
        menuloadssh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuloadsshActionPerformed(evt);
            }
        });
        jMenu1.add(menuloadssh);

        menuloadcmd.setText("Run local command...");
        menuloadcmd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuloadcmdActionPerformed(evt);
            }
        });
        jMenu1.add(menuloadcmd);
        jMenu1.add(jSeparator1);

        exportpdfmenu.setText("Export to PDF...");
        exportpdfmenu.setEnabled(false);
        exportpdfmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportpdfmenuActionPerformed(evt);
            }
        });
        jMenu1.add(exportpdfmenu);

        exportjpgmenu.setText("Export to JPG...");
        exportjpgmenu.setEnabled(false);
        exportjpgmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportjpgmenuActionPerformed(evt);
            }
        });
        jMenu1.add(exportjpgmenu);

        exportpngmenu.setText("Export to PNG...");
        exportpngmenu.setEnabled(false);
        exportpngmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportpngmenuActionPerformed(evt);
            }
        });
        jMenu1.add(exportpngmenu);

        exportcsvmenu.setText("Export to CSV...");
        exportcsvmenu.setEnabled(false);
        exportcsvmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportcsvmenuActionPerformed(evt);
            }
        });
        jMenu1.add(exportcsvmenu);

        exporttxtmenu.setText("Export to TXT...");
        exporttxtmenu.setEnabled(false);
        exporttxtmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exporttxtmenuActionPerformed(evt);
            }
        });
        jMenu1.add(exporttxtmenu);
        jMenu1.add(jSeparator2);

        selecttimemenu.setText("Select time range...");
        selecttimemenu.setEnabled(false);
        selecttimemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selecttimemenuActionPerformed(evt);
            }
        });
        jMenu1.add(selecttimemenu);
        jMenu1.add(jSeparator5);

        addtoauto.setText("Add to automatic");
        addtoauto.setEnabled(false);
        addtoauto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoautoActionPerformed(evt);
            }
        });
        jMenu1.add(addtoauto);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");

        disknamemenu.setText("Disk Name");
        disknamemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disknamemenuActionPerformed(evt);
            }
        });
        jMenu2.add(disknamemenu);

        showtriggermenu.setText("Show Trigger");
        showtriggermenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showtriggermenuActionPerformed(evt);
            }
        });
        jMenu2.add(showtriggermenu);
        jMenu2.add(jSeparator3);

        pagesizemenu.setText("Memory pagesize");
        pagesizemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagesizemenuActionPerformed(evt);
            }
        });
        jMenu2.add(pagesizemenu);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Export zero'ed disk");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem1);

        chkbox_cpuused.setText("Show CPU used stacked");
        chkbox_cpuused.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkbox_cpuusedActionPerformed(evt);
            }
        });
        jMenu2.add(chkbox_cpuused);

        chkbox_cpu100xaxis.setText("Show CPU axis 0-100");
        chkbox_cpu100xaxis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkbox_cpu100xaxisActionPerformed(evt);
            }
        });
        jMenu2.add(chkbox_cpu100xaxis);

        memusedbufadj.setText("Show memused (buffers adjusted)");
        memusedbufadj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memusedbufadjActionPerformed(evt);
            }
        });
        jMenu2.add(memusedbufadj);

        menushowstackedmem.setSelected(true);
        menushowstackedmem.setText("Show Memory stacked");
        menushowstackedmem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menushowstackedmemActionPerformed(evt);
            }
        });
        jMenu2.add(menushowstackedmem);
        jMenu2.add(jSeparator4);

        chkbox_stackintr.setText("Show Interrupt stacked");
        chkbox_stackintr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkbox_stackintrActionPerformed(evt);
            }
        });
        jMenu2.add(chkbox_stackintr);

        jMenuItem11.setText("Add Personal graph");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void menuloadcmdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuloadcmdActionPerformed
        mysar.do_localcommand(null);
}//GEN-LAST:event_menuloadcmdActionPerformed

    private void menuloadtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuloadtxtActionPerformed
        mysar.do_fileread(null);
}//GEN-LAST:event_menuloadtxtActionPerformed

    public void refreshGraph() {
        if (obj2 != null) {
            chartContainer.removeAll();
            if (mysar.isparsing) {
                chartContainer.add(obj2.run(null, null));
            } else {
                chartContainer.add(obj2.run(mysar.startofgraph, mysar.endofgraph));
            }
            displayPanel.validate();
        }
    }

    public void changeintoherframe(String s) {
        if (!"none".equals(s)) {
            traverse(jTree1, s);
        }
    }

    public void traverse(JTree tree, String s) {
        TreeModel model = tree.getModel();
        if (model != null) {
            Object root = model.getRoot();
            if ("root".equals(s)) {
                jTree1.setSelectionPath(new TreePath((DefaultMutableTreeNode) root));
            }
            walk(model, root, s);
        }
    }

    private void walk(TreeModel model, Object o, String s) {
        int cc;
        cc = model.getChildCount(o);
        for (int i = 0; i < cc; i++) {
            Object child = model.getChild(o, i);
            if (model.isLeaf(child)) {
                DefaultMutableTreeNode defaultmutabletreenode = (DefaultMutableTreeNode) child;
                Object obj1 = defaultmutabletreenode.getUserObject();
                if (obj1 instanceof GraphDescription) {
                    GraphDescription graphdescription = (GraphDescription) obj1;
                    AllGraph obj3 = (AllGraph) graphdescription.getobjectPointer();
                    if (obj3.getGraphLink() != null) {
                        if (obj3.getGraphLink().equals(s)) {
                            jTree1.setSelectionPath(new TreePath(defaultmutabletreenode.getPath()));
                        }
                    }
                }
            //child.getobjectPointer());
            } else {
                walk(model, child, s);
            }
        }
    }

    private JPanel setInfoPanel() {
        StringBuffer myinfo = new StringBuffer("\n");
        // master
        JPanel jpanel = new JPanel(new BorderLayout());
        JPanel panelinfo = new JPanel(new BorderLayout());
        panelinfo.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        myinfo.append("kSar Info:\n\n");
        if (mysar.myOS != null) {
            myinfo.append(mysar.myOS.getOSInfo());
        }
        myinfo.append(mysar.calendarinfo());
        if (mysar.DetectedBounds.size() > 0) {
            myinfo.append("\n Detected bottlenecks:\n");
            for (Iterator<String> it = mysar.DetectedBounds.keySet().iterator(); it.hasNext();) {
                String key = it.next();
                AllGraph value = mysar.DetectedBounds.get(key);
                myinfo.append(" " + key + "\n");
            }
            myinfo.append("\n");
        }

        JTextArea ksarinfo = new JTextArea(myinfo.toString());
        ksarinfo.setEditable(false);
        panelinfo.add(ksarinfo);//, BorderLayout.CENTER);
        JScrollPane jpanel1 = new JScrollPane(panelinfo);
        jpanel1.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        jpanel1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jpanel.add(jpanel1);
        return jpanel;
    }

    private JPanel setEmptyPanel() {
        JPanel jpanel = new JPanel(new FlowLayout());
        jpanel.add(new JLabel(nonesel));
        return jpanel;
    }

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        TreePath treepath = evt.getPath();
        Object obj = treepath.getLastPathComponent();
        if (obj2 != null) {
            if (obj2 instanceof AllGraph) {
                ((AllGraph) (obj2)).setnotifygraph(false);
            }
        }
        if (obj != null) {
            DefaultMutableTreeNode defaultmutabletreenode = (DefaultMutableTreeNode) obj;
            Object obj1 = defaultmutabletreenode.getUserObject();
            if (obj1 instanceof GraphDescription) {
                GraphDescription graphdescription = (GraphDescription) obj1;
                obj2 = (AllGraph) graphdescription.getobjectPointer();
                mysar.mydesktop.showgraphselected((String) obj2.getGraphLink(), this);
                ((AllGraph) (obj2)).setnotifygraph(true);
                refreshGraph();
            } else {
                if (treepath.getParentPath() == null) {
                    obj2 = null;
                    chartContainer.removeAll();
                    chartContainer.add(setInfoPanel());
                    displayPanel.validate();
                    mysar.mydesktop.showgraphselected("root", this);
                    return;
                }
                obj2 = null;
                chartContainer.removeAll();
                chartContainer.add(setEmptyPanel());
                displayPanel.validate();
                mysar.mydesktop.showgraphselected("none", this);
            }
        }  
    }//GEN-LAST:event_jTree1ValueChanged

    private void chkbox_cpuusedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkbox_cpuusedActionPerformed
        mysar.showstackedcpu = chkbox_cpuused.getState();
        refreshGraph();
}//GEN-LAST:event_chkbox_cpuusedActionPerformed

    private void chkbox_cpu100xaxisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkbox_cpu100xaxisActionPerformed
        mysar.show100axiscpu = chkbox_cpu100xaxis.getState();
        refreshGraph();
}//GEN-LAST:event_chkbox_cpu100xaxisActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        OtherGraph tmp = new OtherGraph(mysar);
        tmp.addtotree(mysar.graphtree);
        mysar.pdfList.put("xXx", tmp);
        tmp.setGraphLink("xXx");
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void menuloadsshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuloadsshActionPerformed
        mysar.do_sshread(null);
}//GEN-LAST:event_menuloadsshActionPerformed

    private void memusedbufadjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memusedbufadjActionPerformed
        mysar.showmemusedbuffersadjusted = memusedbufadj.getState();
        refreshGraph();
}//GEN-LAST:event_memusedbufadjActionPerformed

    private void selecttimemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecttimemenuActionPerformed
        //CalendarSelection2 t = new CalendarSelection2(mysar, mysar.timeList);
        CalendarSelection t = new CalendarSelection(mysar);
        t.setVisible(true);
    }//GEN-LAST:event_selecttimemenuActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        mysar.showemptydisk = jCheckBoxMenuItem1.getState();
        refreshGraph();
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void exportpdfmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportpdfmenuActionPerformed
        askPdfFilename u = new askPdfFilename(mysar);
        String pdffilename = u.run();
        if (pdffilename == null) {
            return;
        }
        GraphSelection t = new GraphSelection(mysar, mysar.pdfList, pdffilename, "PDF");
    }//GEN-LAST:event_exportpdfmenuActionPerformed

    private void exportjpgmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportjpgmenuActionPerformed
        askImageBasename u = new askImageBasename(mysar);
        String pdffilename = u.run();
        if (pdffilename == null) {
            return;
        }
        GraphSelection t = new GraphSelection(mysar, mysar.pdfList, pdffilename, "JPG");
    }//GEN-LAST:event_exportjpgmenuActionPerformed

    private void exportpngmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportpngmenuActionPerformed
        askImageBasename u = new askImageBasename(mysar);
        String pdffilename = u.run();
        if (pdffilename == null) {
            return;
        }
        GraphSelection t = new GraphSelection(mysar, mysar.pdfList, pdffilename, "PNG");
    }//GEN-LAST:event_exportpngmenuActionPerformed

    private void menushowstackedmemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menushowstackedmemActionPerformed
        mysar.showstackedmem = menushowstackedmem.getState();
        refreshGraph();
    }//GEN-LAST:event_menushowstackedmemActionPerformed

    private void exportcsvmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportcsvmenuActionPerformed
        askCsvFilename u = new askCsvFilename(mysar);
        String csvfilename = u.run();
        if (csvfilename == null) {
            return;
        }
        mysar.outputCsv(csvfilename);
    }//GEN-LAST:event_exportcsvmenuActionPerformed

    private void showtriggermenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showtriggermenuActionPerformed
        mysar.showtrigger = showtriggermenu.getState();
        refreshGraph();
    }//GEN-LAST:event_showtriggermenuActionPerformed

    private void pagesizemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagesizemenuActionPerformed
        askforsolarispagesize();
    }//GEN-LAST:event_pagesizemenuActionPerformed

    private void disknamemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disknamemenuActionPerformed
        DiskNameBox disknameBox = new DiskNameBox(this, mysar);
    }//GEN-LAST:event_disknamemenuActionPerformed

    private void addtoautoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoautoActionPerformed
        String shortcut_desc;
        // some ask to remenber the window
        // ask for shortcut name
        if ("Empty".equals(mysar.reload_command)) {
            return;
        }
        shortcut_desc = JOptionPane.showInputDialog("Enter a description for this shortcut ", "");
        if (shortcut_desc == null) {
            return;
        }
        if (mysar.reload_command.indexOf("file://") == 0) {
            kSarConfig.shortcut_window_list.put(mysar.reload_command, shortcut_desc);
            mysar.mydesktop.add_shortcut(shortcut_desc);
            kSarConfig.writeDefault();
        }
        if (mysar.reload_command.indexOf("cmd://") == 0) {
            kSarConfig.shortcut_window_list.put(mysar.reload_command, shortcut_desc);
            mysar.mydesktop.add_shortcut(shortcut_desc);
            kSarConfig.writeDefault();
        }
        if (mysar.reload_command.indexOf("ssh://") == 0) {
            // grab from sshcommand
            String user;
            String host;
            int port = 22;
            String cmd;
            String tmpcmd = mysar.reload_command.substring(6);
            String ret;
            String[] cmd_splitted = tmpcmd.split("@", 2);
            if (cmd_splitted.length != 2) {
                return;
            }
            String[] user_part = cmd_splitted[0].split(":", 2);
            if (user_part.length == 2) {
                user = user_part[0];
            } else {
                user = cmd_splitted[0];
            }
            String[] cmd_part = cmd_splitted[1].split("/", 2);
            if (cmd_part.length != 2) {
                return;
            }
            String[] host_part = cmd_part[0].split(":", 2);
            if (host_part.length == 2) {
                host = host_part[0];
                try {
                    port = Integer.parseInt(host_part[1]);
                } catch (NumberFormatException e) {
                    return;
                }
            } else {
                host = host_part[0];
            }
            cmd = cmd_part[1];
            if (port != 22) {
                ret = "ssh://" + user + "@" + host + ":" + port + "/" + cmd;
            } else {
                ret = "ssh://" + user + "@" + host + "/" + cmd;
            }
            kSarConfig.shortcut_window_list.put(ret, shortcut_desc);
            mysar.mydesktop.add_shortcut(shortcut_desc);
            kSarConfig.writeDefault();
        }
        
    }//GEN-LAST:event_addtoautoActionPerformed

    private void redobuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redobuttonActionPerformed
        redobutton.setEnabled(false);
        if ("Redo".equals(redobutton.getText())) {
            if (mysar.parse_mission(mysar.reload_command)) {
                mysar.do_mission(mysar.reload_command);
            }
        }
        if ("Stop".equals(redobutton.getText())) {
            mysar.command_interrupted = true;
            try {
                if ( mysar.launched_command != null) {
                    mysar.launched_command.interrupt();
                    mysar.launched_command.join(100);
                }
            } catch (InterruptedException iee) {
                iee.printStackTrace();
            }
            mysar.launched_command=null;
            mysar.changemenu(true);
        }
    }//GEN-LAST:event_redobuttonActionPerformed

    
    private void save_tempfile() {
        if ( mysar.tmpfile != null ) {
            if ( mysar.tmpfile.length() > 0 ) {
                String [] options = {"yes", "no"};
                int foo = JOptionPane.showOptionDialog(this, "Would you like to save the sar file ?", "Warning", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
                if ( foo == 0 ) {
                    askSaveFilename tmp = new askSaveFilename(mysar);
                    String savetostr =tmp.run();
                    if ( savetostr != null ) {
                        File saveto = new File(savetostr);
                        SaveSar t=null;
                        try {
                            t = new SaveSar(mysar.tmpfile,saveto);
                        } catch (IOException ioe) {}
                        t=null;
                    }
                    tmp=null;
                }
            }
        }        
    }
    
    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        mysar.command_interrupted = true;
        if (mysar.launched_command != null) {
            try {
            mysar.launched_command.interrupt();
            mysar.launched_command.join(100);
            } catch (InterruptedException iee) {
                iee.printStackTrace();
            }
        }
        mysar.launched_command=null;
        save_tempfile();
        this.dispose();
        mysar.cleanup_temp();
        mysar.resetInfo();
        mysar.myUI=null;
        mysar = null;
    }//GEN-LAST:event_formInternalFrameClosing

    private void exporttxtmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exporttxtmenuActionPerformed
        save_tempfile();
    }//GEN-LAST:event_exporttxtmenuActionPerformed

    private void chkbox_stackintrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkbox_stackintrActionPerformed
        mysar.showstackedintrlist = chkbox_stackintr.getState();
        refreshGraph();
}//GEN-LAST:event_chkbox_stackintrActionPerformed

    public int exportPng(String pdffilename, Map<String,AllGraph> pdfList) {
        JPanel panel0 = new JPanel();
        JPanel panel1 = new JPanel();
        JPanel panel2 = new JPanel();
        JProgressBar pbar;
        pbar = new JProgressBar();
        pbar.setMinimum(0);
        pbar.setMaximum(pdfList.size());
        pbar.setStringPainted(true);
        JLabel mytitre = new JLabel("Exporting: ");
        panel1.add(mytitre);
        panel2.add(pbar);
        panel0.add(panel1);
        panel0.add(panel2);
        JDialog mydial = new JDialog();
        mydial.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        mydial.setContentPane(panel0);
        mydial.setSize(250, 80);
        mydial.pack();
        mydial.setLocationRelativeTo(this);
        mydial.setVisible(true);
        Runnable t = new PngExport(pdffilename, pdfList, pbar, mydial, mysar, kSarConfig.imagehtml, kSarConfig.imageheight, kSarConfig.imagewidth);
        Thread th = new Thread(t);
        th.start();

        return 1;
    }

    public void askforsolarispagesize() {
        String tmp;
        tmp = JOptionPane.showInputDialog("Size of pagesize:\n(use -1 for graphing block value)\nuse /usr/bin/pagesize to known it", new Integer(mysar.solarispagesize).toString());
        if (tmp != null) {
            try {
                Integer i = new Integer(tmp);
                mysar.solarispagesize = i.intValue();
                kSarConfig.writeSpecial("PGSZ:" + mysar.hostName, i.toString());
                refreshGraph();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Can find pagesize", "PageSize error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public int exportJpg(String pdffilename, Map<String,AllGraph> pdfList) {
        JPanel panel0 = new JPanel();
        JPanel panel1 = new JPanel();
        JPanel panel2 = new JPanel();
        JProgressBar pbar;
        pbar = new JProgressBar();
        pbar.setMinimum(0);
        pbar.setMaximum(pdfList.size());
        pbar.setStringPainted(true);
        JLabel mytitre = new JLabel("Exporting: ");
        panel1.add(mytitre);
        panel2.add(pbar);
        panel0.add(panel1);
        panel0.add(panel2);
        JDialog mydial = new JDialog();
        mydial.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        mydial.setContentPane(panel0);
        mydial.setSize(250, 80);
        mydial.pack();
        mydial.setLocationRelativeTo(this);
        mydial.setVisible(true);
        Runnable t = new JpgExport(pdffilename, pdfList, pbar, mydial, mysar, kSarConfig.imagehtml, kSarConfig.imageheight, kSarConfig.imagewidth);
        Thread th = new Thread(t);
        th.start();

        return 1;
    }

    public int exportPdf(String pdffilename, Map<String,AllGraph> pdfList) {
        JPanel panel0 = new JPanel();
        JPanel panel1 = new JPanel();
        JPanel panel2 = new JPanel();
        JProgressBar pbar;
        pbar = new JProgressBar();
        pbar.setMinimum(0);
        pbar.setMaximum(pdfList.size());
        pbar.setStringPainted(true);
        JLabel mytitre = new JLabel("Exporting: ");
        panel1.add(mytitre);
        panel2.add(pbar);
        panel0.add(panel1);
        panel0.add(panel2);
        JDialog mydial = new JDialog();
        mydial.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        mydial.setContentPane(panel0);
        mydial.setSize(250, 80);
        mydial.pack();
        mydial.setLocationRelativeTo(this);
        mydial.setVisible(true);
        Runnable t = new PdfExport(pdffilename, pdfList, pbar, mydial, mysar);
        Thread th = new Thread(t);
        th.start();

        return 1;
    }

    public void add2tree(DefaultMutableTreeNode parent, DefaultMutableTreeNode newNode) {
        DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
        model.insertNodeInto(newNode, parent, parent.getChildCount());
    }

    public void remove2tree(DefaultMutableTreeNode oldNode) {
        DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
        model.removeNodeFromParent(oldNode);
    }

    public void home2tree() {
        jTree1.setSelectionRow(0);
        jTree1.expandRow(0);
    }

    public void reset2tree() {
        DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
        if (model.getChildCount(model.getRoot()) >= 1) {
            mysar.graphtree.removeAllChildren();
            model.reload(mysar.graphtree);
        }
        jTree1.expandRow(0);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JMenuItem addtoauto;
    public javax.swing.JPanel chartContainer;
    private javax.swing.JCheckBoxMenuItem chkbox_cpu100xaxis;
    public javax.swing.JCheckBoxMenuItem chkbox_cpuused;
    public javax.swing.JCheckBoxMenuItem chkbox_stackintr;
    public javax.swing.JMenuItem disknamemenu;
    private javax.swing.JPanel displayPanel;
    public javax.swing.JMenuItem exportcsvmenu;
    public javax.swing.JMenuItem exportjpgmenu;
    public javax.swing.JMenuItem exportpdfmenu;
    public javax.swing.JMenuItem exportpngmenu;
    public javax.swing.JMenuItem exporttxtmenu;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTree jTree1;
    public javax.swing.JCheckBoxMenuItem memusedbufadj;
    private javax.swing.JMenuItem menuloadcmd;
    private javax.swing.JMenuItem menuloadssh;
    private javax.swing.JMenuItem menuloadtxt;
    public javax.swing.JCheckBoxMenuItem menushowstackedmem;
    private javax.swing.JMenuItem pagesizemenu;
    public javax.swing.JButton redobutton;
    public javax.swing.JMenuItem selecttimemenu;
    public javax.swing.JCheckBoxMenuItem showtriggermenu;
    // End of variables declaration//GEN-END:variables
    public kSar mysar = null;
    AllGraph obj2 = null;
    static final String nonesel = "No type selected";
}
