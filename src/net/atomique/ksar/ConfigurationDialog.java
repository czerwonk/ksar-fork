package net.atomique.ksar;

import java.io.File;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;

/**
 * @author Daniel Czerwonk <d.czerwonk@googlemail.com>
 */
public class ConfigurationDialog extends javax.swing.JDialog {

	private static final long serialVersionUID = -6484950105485229743L;
	public static final int OK_RESULT = 0;
	public static final int CANCEL_RESULT = 1;
	
	private final IConfigurationViewModel configuration;
	private File backgroundImageFile;
	private File sshKeyFile;
	public int result;

	
	/**
	 * Creates an instance of ConfigurationDialog
	 */
	public ConfigurationDialog(IConfigurationViewModel configuration) {
		initComponents();
		
		this.configuration = configuration;
        this.backgroundImageFile = configuration.getBackgroundImageFile();
        this.sshKeyFile = configuration.getSshKeyFile();
        
        this.initLookAndFeelComboBox();
		this.refreshUi();
	}
	

	public int getResult() {
	    return this.result;
	}
	
    private void initLookAndFeelComboBox() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        for (LookAndFeelInfo lookAndFeel : UIManager.getInstalledLookAndFeels()) {
            model.addElement(lookAndFeel.getName());
        }
        
        this.lafComboBox.setModel(model);
    }

    private void refreshUi() {
		this.imageHeightSpinner.setValue(this.configuration.getImageHeight());
		this.imageWidthSpinner.setValue(this.configuration.getImageWidth());
		this.lafComboBox.setSelectedItem(this.configuration.getLookAndFeel());
		this.htmlIndexCheckBox.setSelected(this.configuration.isHtmlIndexEnabled());
		this.pdfBottomTextField.setText(this.configuration.getPdfBottomText());
		this.pdfUpperTextField.setText(this.configuration.getPdfUpperRightText());
		this.pdfIndexTextField.setText(this.configuration.getPdfIndexPageText());
		
		if (this.configuration.getBackgroundImageFile() != null
		        && this.configuration.getBackgroundImageFile().exists()) {
		    this.backgroundImageTextField.setText(this.configuration.getBackgroundImageFile().toString());
		}
		
		if (this.configuration.getSshKeyFile() != null
		        && this.configuration.getSshKeyFile().exists()) {
		    this.sshKeyTextField.setText(this.configuration.getSshKeyFile().toString());
		}
		
		this.sshStrictHostCheckCheckBox.setSelected(this.configuration.isSshStrictHostCheckEnabled());
		this.dataUpdateIntervalSpinner.setValue(this.configuration.getDataUpdateInterval());
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		panel = new javax.swing.JPanel();
		imageWidthLabel = new javax.swing.JLabel();
		imageWidthSpinner = new javax.swing.JSpinner();
		imageHeightLabel = new javax.swing.JLabel();
		imageHeightSpinner = new javax.swing.JSpinner();
		lafLabel = new javax.swing.JLabel();
		lafComboBox = new javax.swing.JComboBox();
		htmlIndexLabel = new javax.swing.JLabel();
		htmlIndexCheckBox = new javax.swing.JCheckBox();
		pdfBottomLabel = new javax.swing.JLabel();
		pdfBottomTextField = new javax.swing.JTextField();
		pdfUpperLabel = new javax.swing.JLabel();
		pdfUpperTextField = new javax.swing.JTextField();
		pdfIndexLabel = new javax.swing.JLabel();
		pdfIndexTextField = new javax.swing.JTextField();
		backgroundImageLabel = new javax.swing.JLabel();
		backgroundImageTextField = new javax.swing.JTextField();
		sshKeyLabel = new javax.swing.JLabel();
		sshKeyTextField = new javax.swing.JTextField();
		sshStrictHostCheckLabel = new javax.swing.JLabel();
		sshStrictHostCheckCheckBox = new javax.swing.JCheckBox();
		dataUpdateIntervalLabel = new javax.swing.JLabel();
		dataUpdateIntervalSpinner = new javax.swing.JSpinner();
		cancelButton = new javax.swing.JButton();
		okButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Configuration");
		setResizable(false);

		panel.setLayout(new java.awt.GridLayout(0, 2, 0, 10));

		imageWidthLabel.setText("Image width");
		panel.add(imageWidthLabel);

		imageWidthSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0,
				10000, 1));
		panel.add(imageWidthSpinner);

		imageHeightLabel.setText("Image height");
		panel.add(imageHeightLabel);

		imageHeightSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0,
				10000, 1));
		panel.add(imageHeightSpinner);

		lafLabel.setText("Look & Feel");
		panel.add(lafLabel);

		panel.add(lafComboBox);

		htmlIndexLabel.setText("HTML index");
		panel.add(htmlIndexLabel);
		panel.add(htmlIndexCheckBox);

		pdfBottomLabel.setText("PDF bottom text");
		panel.add(pdfBottomLabel);
		panel.add(pdfBottomTextField);

		pdfUpperLabel.setText("PDF upper right text");
		panel.add(pdfUpperLabel);
		panel.add(pdfUpperTextField);

		pdfIndexLabel.setText("PDF index page text");
		panel.add(pdfIndexLabel);
		panel.add(pdfIndexTextField);

		backgroundImageLabel.setText("Background image file");
		panel.add(backgroundImageLabel);

		backgroundImageTextField.setEditable(false);
		backgroundImageTextField
				.addMouseListener(new java.awt.event.MouseAdapter() {
					public void mouseClicked(java.awt.event.MouseEvent evt) {
						backgroundImageTextFieldMouseClicked(evt);
					}
				});
		panel.add(backgroundImageTextField);

		sshKeyLabel.setText("SSH private key file");
		panel.add(sshKeyLabel);

		sshKeyTextField.setEditable(false);
		sshKeyTextField.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				sshKeyTextFieldMouseClicked(evt);
			}
		});
		panel.add(sshKeyTextField);

		sshStrictHostCheckLabel.setText("SSH strict host checking");
		panel.add(sshStrictHostCheckLabel);
		panel.add(sshStrictHostCheckCheckBox);

		dataUpdateIntervalLabel.setText("Date update interval in ms (0 = off)");
		panel.add(dataUpdateIntervalLabel);

		dataUpdateIntervalSpinner.setModel(new javax.swing.SpinnerNumberModel(
				Long.valueOf(0L), Long.valueOf(0L), Long.valueOf(99999999L),
				Long.valueOf(1L)));
		panel.add(dataUpdateIntervalSpinner);

		cancelButton.setText("Cancel");
		cancelButton.setMaximumSize(new java.awt.Dimension(80, 25));
		cancelButton.setMinimumSize(new java.awt.Dimension(80, 25));
		cancelButton.setPreferredSize(new java.awt.Dimension(80, 25));
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		okButton.setText("OK");
		okButton.setMaximumSize(new java.awt.Dimension(80, 25));
		okButton.setMinimumSize(new java.awt.Dimension(80, 25));
		okButton.setPreferredSize(new java.awt.Dimension(80, 25));
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																javax.swing.GroupLayout.Alignment.TRAILING,
																layout
																		.createSequentialGroup()
																		.addComponent(
																				okButton,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				cancelButton,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.PREFERRED_SIZE))
														.addComponent(
																panel,
																javax.swing.GroupLayout.Alignment.TRAILING,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																413,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap()));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								layout
										.createSequentialGroup()
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.addComponent(
												panel,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												383,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																cancelButton,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																okButton,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap()));

		pack();
	}// </editor-fold>
	//GEN-END:initComponents

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
		this.dispose();
	}

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
	    this.configuration.setImageHeight((Integer)this.imageHeightSpinner.getValue());
	    this.configuration.setImageWidth((Integer)this.imageWidthSpinner.getValue());
	    this.configuration.setLookAndFeel((String)this.lafComboBox.getSelectedItem());
	    this.configuration.setHtmlIndexEnabled(this.htmlIndexCheckBox.isSelected());
	    this.configuration.setPdfUpperRightText(this.pdfUpperTextField.getText());
	    this.configuration.setPdfBottomText(this.pdfBottomTextField.getText());
	    this.configuration.setPdfIndexPageText(this.pdfIndexTextField.getText());
	    this.configuration.setBackgroundImageFile(this.backgroundImageFile);
	    this.configuration.setSshKeyFile(this.sshKeyFile);
	    this.configuration.setSshStrictHostCheckEnabled(this.sshStrictHostCheckCheckBox.isSelected());
	    this.configuration.setDataUpdateInterval((Long)this.dataUpdateIntervalSpinner.getValue());
	    
		this.dispose();
	}

	private void backgroundImageTextFieldMouseClicked(
			java.awt.event.MouseEvent evt) {
		File value = this.selectFile("Select your new background file",
				new File(this.backgroundImageTextField.getText()));

		if (value != null) {
			this.backgroundImageTextField.setText(value.toString());
			this.backgroundImageFile = value;
		}
	}

	private void sshKeyTextFieldMouseClicked(java.awt.event.MouseEvent evt) {
		File value = this.selectFile("Select your ssh key file", new File(
				this.sshKeyTextField.getText()));

		if (value != null) {
			this.sshKeyTextField.setText(value.toString());
			this.sshKeyFile = value;
		}
	}

	private File selectFile(String title, File suggestedFile) {
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setFileHidingEnabled(true);

		if (suggestedFile.exists()) {
			fileChooser.setSelectedFile(suggestedFile);
		}

		if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			return fileChooser.getSelectedFile();
		}

		return null;
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JLabel backgroundImageLabel;
	private javax.swing.JTextField backgroundImageTextField;
	private javax.swing.JButton cancelButton;
	private javax.swing.JLabel dataUpdateIntervalLabel;
	private javax.swing.JSpinner dataUpdateIntervalSpinner;
	private javax.swing.JCheckBox htmlIndexCheckBox;
	private javax.swing.JLabel htmlIndexLabel;
	private javax.swing.JLabel imageHeightLabel;
	private javax.swing.JSpinner imageHeightSpinner;
	private javax.swing.JLabel imageWidthLabel;
	private javax.swing.JSpinner imageWidthSpinner;
	private javax.swing.JComboBox lafComboBox;
	private javax.swing.JLabel lafLabel;
	private javax.swing.JButton okButton;
	private javax.swing.JPanel panel;
	private javax.swing.JLabel pdfBottomLabel;
	private javax.swing.JTextField pdfBottomTextField;
	private javax.swing.JLabel pdfIndexLabel;
	private javax.swing.JTextField pdfIndexTextField;
	private javax.swing.JLabel pdfUpperLabel;
	private javax.swing.JTextField pdfUpperTextField;
	private javax.swing.JLabel sshKeyLabel;
	private javax.swing.JTextField sshKeyTextField;
	private javax.swing.JCheckBox sshStrictHostCheckCheckBox;
	private javax.swing.JLabel sshStrictHostCheckLabel;
	// End of variables declaration//GEN-END:variables

}