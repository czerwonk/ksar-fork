/*
 * Wizard.java
 *
 * Created on 6 juillet 2008, 21:45
 */
package net.atomique.ksar;

import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.UserInfo;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.util.Properties;
import javax.swing.JOptionPane;

/**
 *
 * @author  alex
 */
public class Wizard extends javax.swing.JDialog {

    public static final long serialVersionUID = 501L;
    /** Creates new form Wizard */
    public Wizard(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        mydesktop = (kSarDesktop) parent;
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(screenSize.width / 2 - (450 / 2), screenSize.height / 2 - (300 / 2));
        passfield.requestFocus();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        userlabel = new javax.swing.JLabel();
        userfield = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        passlabel = new javax.swing.JLabel();
        passfield = new javax.swing.JPasswordField();
        jPanel6 = new javax.swing.JPanel();
        hostlabel = new javax.swing.JLabel();
        hostfield = new javax.swing.JTextField();
        openinigraph = new javax.swing.JCheckBox();
        Errormsg = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        Ok = new javax.swing.JButton();
        Skip = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Unified Authentication");
        setModal(true);

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Unified Authentication");
        jPanel3.add(jLabel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        jPanel1.setLayout(new java.awt.GridLayout(5, 0));

        userlabel.setText("Username:");
        jPanel4.add(userlabel);

        userfield.setText(kSarConfig.unified_user);
        userfield.setPreferredSize(new java.awt.Dimension(158, 22));
        jPanel4.add(userfield);

        jPanel1.add(jPanel4);

        passlabel.setText("Password:");
        jPanel5.add(passlabel);

        passfield.setPreferredSize(new java.awt.Dimension(158, 22));
        jPanel5.add(passfield);

        jPanel1.add(jPanel5);

        hostlabel.setText("       Host: ");
        jPanel6.add(hostlabel);

        hostfield.setText(kSarConfig.unified_host);
        hostfield.setPreferredSize(new java.awt.Dimension(158, 22));
        jPanel6.add(hostfield);

        jPanel1.add(jPanel6);

        openinigraph.setSelected(true);
        openinigraph.setText("Startup default graph");
        openinigraph.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(openinigraph);

        Errormsg.setForeground(java.awt.Color.red);
        Errormsg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(Errormsg);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));

        Ok.setText("Ok");
        Ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OkActionPerformed(evt);
            }
        });
        jPanel2.add(Ok);

        Skip.setText("Skip");
        Skip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SkipActionPerformed(evt);
            }
        });
        jPanel2.add(Skip);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void SkipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SkipActionPerformed
        mydesktop.unified_user = null;
        mydesktop.unified_pass = null;
        mydesktop.unified_id = false;
        this.dispose();
    }//GEN-LAST:event_SkipActionPerformed

    private void OkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OkActionPerformed
        // must test user/pass
        boolean retval = verifUser();
        if (retval) {
            kSarConfig.unified_user = userfield.getText();
            kSarConfig.unified_host = hostfield.getText();
            kSarConfig.tile_at_startup = openinigraph.isShowing();
            kSarConfig.writeDefault();
            mydesktop.unified_user = userfield.getText();
            mydesktop.unified_pass = new String(passfield.getPassword());
            mydesktop.unified_id = true;
            this.dispose();
        } 
    }//GEN-LAST:event_OkActionPerformed

    public boolean verifUser() {
        String userResp = userfield.getText();
        String userPass = new String(passfield.getPassword());
        String userHost = hostfield.getText();
        String host;
        int port = 22;
        Session session = null;
        String userhome = (String) systemprops.get("user.home") + (String) systemprops.get("file.separator");
        boolean goodLog = false;

        if (hostfield.getText().indexOf(':') != -1) {
            userHost = hostfield.getText().substring(0, hostfield.getText().indexOf(':'));
            String s_port = hostfield.getText().substring(hostfield.getText().indexOf(':') + 1);
            port = Integer.parseInt(s_port);
        }

        JSch jsch = new JSch();
        try {
            session = jsch.getSession(userResp, userHost, port);
        } catch (JSchException e) {
            JOptionPane.showInternalMessageDialog(this, "Unable to connect", "Bad user/password identification", JOptionPane.ERROR_MESSAGE);
        }

        if (new File(userhome + ".ssh/known_hosts").exists()) {
            try {
                jsch.setKnownHosts(userhome + ".ssh/known_hosts");
            } catch (JSchException e) {
                JOptionPane.showInternalMessageDialog(this, "Unable to connect", "Bad user/password identification", JOptionPane.ERROR_MESSAGE);
            }
        }
        UserInfo ui = new MyUserInfo();
        session.setUserInfo(ui);
        try {
            session.connect();
            if (session.isConnected()) {
                goodLog = true;
                session.disconnect();
            }

        } catch (JSchException ee) {
            Errormsg.setText("Authentication Error");
            Errormsg.setForeground(Color.RED);
            Errormsg.setVisible(true);
        }

        return goodLog;
    }

    public class MyUserInfo implements UserInfo {

        public String getPasswd() {
            return password;
        }

        public void setPassphrase(String passphrase) {
            this.passphrase = passphrase;
        }

        public boolean promptYesNo(String str) {
            return true;
        }
        String password;
        String passphrase;

        public String getPassphrase() {
            return passphrase;
        }

        public boolean promptPassphrase(String message) {
            passphrase = new String(passfield.getPassword());
            return true;
        }

        public String getPassword() {
            return password;
        }

        public boolean promptPassword(String message) {
            password = new String(passfield.getPassword());
            return true;
        }

        public void showMessage(String message) {
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Errormsg;
    private javax.swing.JButton Ok;
    private javax.swing.JButton Skip;
    private javax.swing.JTextField hostfield;
    private javax.swing.JLabel hostlabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    public javax.swing.JCheckBox openinigraph;
    private javax.swing.JPasswordField passfield;
    private javax.swing.JLabel passlabel;
    private javax.swing.JTextField userfield;
    private javax.swing.JLabel userlabel;
    // End of variables declaration//GEN-END:variables
//
    final static Properties systemprops = System.getProperties();
    kSarDesktop mydesktop;
}
